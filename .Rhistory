getwd()
list.files("R")
source("R/fill_in_cells.R")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# loading packages
suppressPackageStartupMessages(library(circlize))
library(data.table)
library(plyr)
library(lubridate)
# loading functions
for(file in list.files("R")){
cat(paste0(file, "\n") )
source(paste("R", file, sep="/"))
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# loading packages
suppressPackageStartupMessages(library(circlize))
library(data.table)
library(plyr)
library(lubridate)
# loading functions
for(file in list.files("R")){
cat(paste0(file, "\n") )
source(paste("R", file, sep="/"))
}
# reading in a data frame where rows are states, columns are policies, and values are enactment dates
# Dates can come in the forms: "1/15/2015", "2015-01-15", "2015", or "January 15, 2015"
df_wide <- read.csv('data/processed/example_data_wide.csv')
names(df_wide) = gsub("\\.", " ", names(df_wide))
# renaming variables
names(df_wide)[names(df_wide) == "nal_date_any_nal"] = "Any Naloxone Access Law (NAL)"
names(df_wide)[names(df_wide) == "nal_date_nal_protocol_standing"] = "NAL Standing Order or Protocall"
names(df_wide)[names(df_wide) == "nal_date_nal_Rx_prescriptive_auth"] = "NAL Prescriptive Authority"
# All NAL laws and GSL
names(df_wide)[names(df_wide) == "gsl_date_anygsl"] = "Any Good Samaritan Law (GSL)"
names(df_wide)[names(df_wide) == "gsl_date_gsl_arrest"] = "GSL Arrest"
# NAL laws and Medical/rec cannabis access
names(df_wide)[names(df_wide) == "mm_date_effMML"] = "Medical Marijuana Law"
names(df_wide)[names(df_wide) == "mm_date_active_medlegdisp"] = "Medical MJ Dispensaries Open"
names(df_wide)[names(df_wide) == "mm_date_effREC"] = "Recreational Marijuana Law"
names(df_wide)[names(df_wide) == "mm_date_active_dispREC"] = "Recreational MJ Store Open"
# Co-prescribing
names(df_wide)[names(df_wide) == "copnal_date_all_prescribe"] = "Naloxone Co-prescribing\nMandating Prescription"
# looking at the data
head(df_wide)
# generating policy wheels
plot_policy_wheels(data = df_wide,
# Ordering policies by name:
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocall", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest"),
# name of the state variable
state_var = "state",
# Restrict to relevant policy intervals, for locations that implemented the policy
policy_intervals = c(2010, 2015, 2020),
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd"),
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2, pt.cex = 2.7, bty = "n", ncol = 2),
panel_width = 4,
panel_height = 5,
# where should the graph be saved?
out_file = "www/policy_wheel_1.png")
?svg
?invisible
svg()
dev.off()
?dev.off
svg()
invisible(dev.off())
# loading packages
suppressPackageStartupMessages(library(circlize))
library(data.table)
library(plyr)
library(lubridate)
# loading functions
for(file in list.files("R")){
cat(paste0(file, "\n") )
source(paste("R", file, sep="/"))
}
# reading in a data frame where rows are states, columns are policies, and values are enactment dates
# Dates can come in the forms: "1/15/2015", "2015-01-15", "2015", or "January 15, 2015"
df_wide <- read.csv('data/processed/example_data_wide.csv')
names(df_wide) = gsub("\\.", " ", names(df_wide))
# renaming variables
names(df_wide)[names(df_wide) == "nal_date_any_nal"] = "Any Naloxone Access Law (NAL)"
names(df_wide)[names(df_wide) == "nal_date_nal_protocol_standing"] = "NAL Standing Order or Protocall"
names(df_wide)[names(df_wide) == "nal_date_nal_Rx_prescriptive_auth"] = "NAL Prescriptive Authority"
# All NAL laws and GSL
names(df_wide)[names(df_wide) == "gsl_date_anygsl"] = "Any Good Samaritan Law (GSL)"
names(df_wide)[names(df_wide) == "gsl_date_gsl_arrest"] = "GSL Arrest"
# NAL laws and Medical/rec cannabis access
names(df_wide)[names(df_wide) == "mm_date_effMML"] = "Medical Marijuana Law"
names(df_wide)[names(df_wide) == "mm_date_active_medlegdisp"] = "Medical MJ Dispensaries Open"
names(df_wide)[names(df_wide) == "mm_date_effREC"] = "Recreational Marijuana Law"
names(df_wide)[names(df_wide) == "mm_date_active_dispREC"] = "Recreational MJ Store Open"
# Co-prescribing
names(df_wide)[names(df_wide) == "copnal_date_all_prescribe"] = "Naloxone Co-prescribing\nMandating Prescription"
# looking at the data
head(df_wide)
# generating policy wheels
plot_policy_wheels(data = df_wide,
# Ordering policies by name:
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocall", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest"),
# name of the state variable
state_var = "state",
# Restrict to relevant policy intervals, for locations that implemented the policy
policy_intervals = c(2010, 2015, 2020),
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd"),
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2, pt.cex = 2.7, bty = "n", ncol = 2),
panel_width = 4,
panel_height = 5,
# where should the graph be saved?
out_file = "www/policy_wheel_1.svg")
traceback()
install.packages("tidyverse")
install.packages("purrr")
dir.create("/poppy/data/derived_data/jeagan/Rtmp")
Sys.setenv(TMPDIR="/poppy/data/derived_data/jeagan/Rtmp")
install.packages("rmarkdown")
getOption("repos")
options(repos=structure(c(CRAN="http://cran.rand.org")))
getOption("repos")
install.packages("rmarkdown")
install.packages("circlize")
install.packages(c("data.table", "plyr", "lubridate"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# loading packages
suppressPackageStartupMessages(library(circlize))
library(data.table)
library(plyr)
library(lubridate)
# loading functions
for(file in list.files("R")){
cat(paste0(file, "\n") )
source(paste("R", file, sep="/"))
}
suppressPackageStartupMessages(library(circlize))
library(data.table)
library(plyr)
library(lubridate)
# reading in a data frame where rows are states, columns are policies, and values are enactment dates
# Dates can come in the forms: "1/15/2015", "2015-01-15", "2015", or "January 15, 2015"
df_wide <- read.csv('data/processed/example_data_wide.csv')
names(df_wide) = gsub("\\.", " ", names(df_wide))
# renaming variables
names(df_wide)[names(df_wide) == "nal_date_any_nal"] = "Any Naloxone Access Law (NAL)"
names(df_wide)[names(df_wide) == "nal_date_nal_protocol_standing"] = "NAL Standing Order or Protocol"
names(df_wide)[names(df_wide) == "nal_date_nal_Rx_prescriptive_auth"] = "NAL Prescriptive Authority"
# All NAL laws and GSL
names(df_wide)[names(df_wide) == "gsl_date_anygsl"] = "Any Good Samaritan Law (GSL)"
names(df_wide)[names(df_wide) == "gsl_date_gsl_arrest"] = "GSL Arrest"
# NAL laws and Medical/rec cannabis access
names(df_wide)[names(df_wide) == "mm_date_effMML"] = "Medical Marijuana Law"
names(df_wide)[names(df_wide) == "mm_date_active_medlegdisp"] = "Medical MJ Dispensaries Open"
names(df_wide)[names(df_wide) == "mm_date_effREC"] = "Recreational Marijuana Law"
names(df_wide)[names(df_wide) == "mm_date_active_dispREC"] = "Recreational MJ Store Open"
# Co-prescribing
names(df_wide)[names(df_wide) == "copnal_date_all_prescribe"] = "Naloxone Co-prescribing\nMandating Prescription"
# looking at the data
head(df_wide)
# generating policy wheels
plot_policy_wheels(data = df_wide,
# Ordering policies by name:
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocol", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest"),
# name of the state variable
state_var = "state",
# Restrict to relevant policy intervals, for locations that implemented the policy
policy_intervals = c(2010, 2015, 2020),
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd"),
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2, pt.cex = 2.7, bty = "n", ncol = 2),
panel_width = 4,
panel_height = 5,
# where should the graph be saved?
out_file = "www/policy_wheel_1.svg")
# displaying the new graph
knitr::include_graphics("www/policy_wheel_1.svg")
options(repos=structure(c(CRAN="http://cran.rand.org")))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# loading packages
suppressPackageStartupMessages(library(circlize))
library(data.table)
library(plyr)
library(lubridate)
# loading functions
for(file in list.files("R")){
cat(paste0(file, "\n") )
source(paste("R", file, sep="/"))
}
# reading in a data frame where rows are states, columns are policies, and values are enactment dates
# Dates can come in the forms: "1/15/2015", "2015-01-15", "2015", or "January 15, 2015"
df_wide <- read.csv('data/processed/example_data_wide.csv')
names(df_wide) = gsub("\\.", " ", names(df_wide))
# renaming variables
names(df_wide)[names(df_wide) == "nal_date_any_nal"] = "Any Naloxone Access Law (NAL)"
names(df_wide)[names(df_wide) == "nal_date_nal_protocol_standing"] = "NAL Standing Order or Protocol"
names(df_wide)[names(df_wide) == "nal_date_nal_Rx_prescriptive_auth"] = "NAL Prescriptive Authority"
# All NAL laws and GSL
names(df_wide)[names(df_wide) == "gsl_date_anygsl"] = "Any Good Samaritan Law (GSL)"
names(df_wide)[names(df_wide) == "gsl_date_gsl_arrest"] = "GSL Arrest"
# NAL laws and Medical/rec cannabis access
names(df_wide)[names(df_wide) == "mm_date_effMML"] = "Medical Marijuana Law"
names(df_wide)[names(df_wide) == "mm_date_active_medlegdisp"] = "Medical MJ Dispensaries Open"
names(df_wide)[names(df_wide) == "mm_date_effREC"] = "Recreational Marijuana Law"
names(df_wide)[names(df_wide) == "mm_date_active_dispREC"] = "Recreational MJ Store Open"
# Co-prescribing
names(df_wide)[names(df_wide) == "copnal_date_all_prescribe"] = "Naloxone Co-prescribing\nMandating Prescription"
# looking at the data
head(df_wide)
library(shiny); runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example_2.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example_2.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example_2.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example_2.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example_2.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example_2.R')
?renderPlot
runApp('/poppy/programs/jeagan/examples/shiny app downloader example_2.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
runApp('/poppy/programs/jeagan/examples/shiny app downloader example.R')
# generating policy wheels
plot_policy_wheels(data = df_wide,
# Ordering policies by name:
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocol", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest"),
# name of the state variable
state_var = "state",
# Restrict to relevant policy intervals, for locations that implemented the policy
policy_intervals = c(2010, 2015, 2020),
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd"),
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2.5, pt.cex = 2.7, bty = "n", ncol = 2),
panel_width = 4,
panel_height = 5,
# where should the graph be saved?
out_file = "www/policy_wheel_1.svg")
# displaying the new graph
knitr::include_graphics("www/policy_wheel_1.svg")
# generating policy wheels
plot_policy_wheels(data = df_wide,
# Ordering policies by name:
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocol", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest"),
# name of the state variable
state_var = "state",
# Restrict to relevant policy intervals, for locations that implemented the policy
policy_intervals = c(2010, 2013, 2016, 2019, 2021),
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd"),
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2.5, pt.cex = 2.7, bty = "n", ncol = 2),
panel_width = 4,
panel_height = 5,
# where should the graph be saved?
out_file = "www/policy_wheel_1.svg")
# generating policy wheels
plot_policy_wheels(data = df_wide,
# Ordering policies by name:
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocol", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest"),
# name of the state variable
state_var = "state",
# Restrict to relevant policy intervals, for locations that implemented the policy
policy_intervals = c(2010, 2013, 2016, 2019, 2021),
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd"),
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2.5, pt.cex = 2.7, bty = "n", ncol = 2),
panel_width = 4,
panel_height = 5,
# where should the graph be saved?
out_file = "www/policy_wheel_1_revised.svg")
# displaying the new graph
knitr::include_graphics("www/policy_wheel_1_revised.svg")
# generating policy wheels
plot_policy_wheels(data = df_wide,
# Ordering policies by name:
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocol", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest"),
# name of the state variable
state_var = "state",
# Restrict to relevant policy intervals, for locations that implemented the policy
policy_intervals = c(2010, 2013, 2016, 2019, 2021),
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd"),
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2.5, pt.cex = 2.7, bty = "n", ncol = 2),
panel_width = 4,
panel_height = 5,
nrows = 2,
ncols = 3,
# where should the graph be saved?
out_file = "www/policy_wheel_1_revised.svg")
# displaying the new graph
knitr::include_graphics("www/policy_wheel_1_revised.svg")
policies = NULL
state_var = "state"
nrows = NULL
ncols = NULL
panel_width = 7
panel_height = 6
byrow = TRUE
plot_width = 20
plot_height = 12
legend_args = list(x = "center",
xjust = 0.5, y.intersp = 1.3,
x.intersp = 1.3, cex = 3,
pt.cex = 2.7, bty = "n", ncol = 2)
out_file = NULL
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocol", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest")
# name of the state variable
state_var = "state"
# Restrict to relevant policy intervals, for locations that implemented the policy
policy_intervals = c(2010, 2015, 2020)
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd")
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2.5, pt.cex = 2.7, bty = "n", ncol = 2)
panel_width = 4
panel_height = 5
data = df_wide
# Ordering policies by name:
policies = c("Any Naloxone Access Law (NAL)", "NAL Standing Order or Protocol", "NAL Prescriptive Authority", "Any Good Samaritan Law (GSL)", "GSL Arrest")
# name of the state variabl
state_var = "state"
# Restrict to relevant policy intervals, for locations that impleented the policy
policy_intervals = c(2010, 2013, 2016, 2019, 2021)
plot_colors = c("#1f77b4", "#ff7f0e", "#FFFF00", "#dab8e5", "#9467bd"
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2.5, pt.cex = 2.7, bty = "n", ncol = 2),
legend_args = list(x = "center", xjust = 0.5, y.intersp = 1.3, x.intersp = 1.3, cex = 2.5, pt.cex = 2.7, bty = "n", ncol = 2)
panel_width = 4
panel_height = 5
nrows = 2
ncols = 3
# where should the graph be saved?
out_file = "www/policy_wheel_1_revised.svg"
# some error catching
if(any(!(policies %in% names(data)))){
stop("make sure all values in `policies` are variable names in your data.")
}
# configuring default arguments to determine layout of policy wheels if they are not provided
if(is.null(nrows)){
nrows = ceiling(length(policy_intervals)/3)
}
if(is.null(ncols)){
ncols = min(length(policy_intervals), 3)
}
# Order states so that region-names make sense when applied to areas of the policy circle:
states <- c("OH", "WI", "DE", "FL", "GA", "MD", "NC", "SC", "VA", "DC", "WV", "IA",
"KS", "MN", "MO", "NE", "ND", "SD", "AL", "KY", "MS", "TN", "AR", "LA",
"OK", "TX", "AZ", "CO", "ID", "MT", "NV", "NM", "UT", "WY", "CA", "OR",
"WA", "AK", "HI", "CT", "ME", "MA", "NH", "RI", "VT", "NY", "NJ", "PA",
"IL", "IN", "MI")
# Load data and reshape long. Re-code policies as absorbing states at 5-year
# intervals
df = as.data.frame(data)[c(state_var, policies)]
df <- melt(setDT(df), id.vars = state_var, variable.name = "policy", value.name = "implemented")
names(df)[names(df) == state_var] <- "state"
# Convert implemented category into a 0/1, indicating if policy was implemented within
# a given year.
df[, implemented := parse_date_time(implemented, orders = c("mdy", "ymd", "B d, y", "y"))]
df[, year := year(implemented)]
df <- df[!is.na(year),]
df[, implemented := as.numeric(implemented)]
df[, implemented := 1]
# for policies that were passed before the first year of the policy wheel,
# make sure they are included
df$year[df$year < min(policy_intervals)] = min(policy_intervals)
# Set up square dataset, then subset policy database to rows with observations.
# Merge observations onto the square dataset.
year_range = min(policy_intervals):max(policy_intervals)
df_square <- expand.grid("state" = states,
"policy" = policies,
"year" = year_range)
df <- setDT(merge(df_square, df, by = c("state", "policy", "year"), all.x = T))
# Set implemented == T, for all years after the implementation year:
setorder(df, state, policy, year)
df[, implemented := nafill(.SD$implemented, "locf"), by = c("state", "policy")]
df[is.na(implemented), implemented := 0]
# Ordering policies:
policies <- unique(df$policy)
df <- df[(year %in% policy_intervals) & (implemented == 1),]
# Set up dictionary for policy wheel options:
wheel_opts <- data.table("policy" = policies,
"i" = 1:length(policies),
"col" = plot_colors)
# setting up output
if(!is.null(out_file)){
if(grepl("\\.svg", out_file)){
svg(filename = out_file,
width = plot_width, height = plot_height)
} else if(grepl("\\.pdf", out_file)){
pdf(filename = out_file,
width = plot_width, height = plot_height)
} else if(grepl("\\.png", out_file)){
png(filename = out_file,
width = plot_width, height = plot_height)
} else {
stop("currently, only .svg, .png, and .pdf are supported. Please choose a different file extention for `out_file`.")
}
}
# Create layout onto which the chart's title, legend, and policy wheels will be pasted onto
layout.mat <- matrix(1:(nrows*ncols), ncol = ncols, nrow = nrows, byrow = byrow) # plot matrix
layout.mat <- rbind(layout.mat, matrix((nrows*ncols)+1, nrow=1, ncol=ncols))
layout.mat
max(layout.mat)
leg_num = ceiling(length(policies)/2)*2
col_order <- matrix(leg_num:1, nrow = leg_num/2, ncol = 2, byrow = T)
leg_num
col_order
wheel_opts$policy
wheel_opts$policy[col_order]
col_order
c(rep(panel_height, nrows), (ceiling(length(policies)/2)*2)*.25)
rep(panel_width, ncols)
c(rep(panel_height, nrows), (ceiling(length(policies)/2)*2)*.25)
layout.mat
layout.mat
layout(layout.mat, respect = TRUE,
heights = c(rep(panel_height, nrows), (ceiling(length(policies)/2)*2)*.25),
widths = rep(panel_width, ncols))
# adding policy wheels to plot
lapply(policy_intervals, plot_policy_wheel_internal, states,  df, wheel_opts, policies)
ceiling(length(policies)/2)*2
wheel_opts$policy[col_order]
layout.mat
invisible(dev.off())
